import torch
import math
'''----------------------------------------------------------------------------------------------'''
def sequence_mask(X, valid_len, value=0):
    maxlen = X.size(1)
    mask = torch.arange((maxlen), dtype=torch.float32, device=X.device)[None, :] < valid_len[:, None]
    X[~mask] = value
    return X

def masked_softmax(x, valid_lens):
    if valid_lens is None:
        return torch.nn.functional.softmax(x, dim=-1)
    else:
        shape = x.shape
        if valid_lens.dim() == 1:
            valid_lens = torch.repeat_interleave(valid_lens, shape[1])
        else:
            valid_lens = valid_lens.reshape(-1)
        x = sequence_mask(x.reshape(-1, shape[-1]), valid_lens, value=-1e6)
    return torch.nn.functional.softmax(x.reshape(shape), dim=-1)
'''----------------------------------------------------------------------------------------------'''
class Position_and_Linear(torch.nn.Module):
    # 输入x，x的形状是(batch, n, d_in)
    # 输出y, y的形状是(batch, n, d_out)    
    def __init__(self, d_in, d_middle, d_out):
        super(Position_and_Linear, self).__init__()
        self.linear_1 = torch.nn.Linear(d_in, d_middle)
        self.linear_2 = torch.nn.Linear(d_middle, d_out)
        self.relu = torch.nn.ReLU()

    def forward(self, x):
        # 经过两个线性层和一个relu层实现最后一个维度的降维
        x = self.linear_1(x)
        x = self.relu(x)
        x = self.linear_2(x)

        return x
'''----------------------------------------------------------------------------------------------'''    
class Res_and_Ln(torch.nn.Module):
    # 将pal的输入x与输出y进行残差连接，随后再进行LN层规范化
    def __init__(self, shape, dropout):
        super(Res_and_Ln, self).__init__()
        self.ln = torch.nn.LayerNorm(shape)
        self.dropout = torch.nn.Dropout(dropout)

    def forward(self, x, y):
        # 先进行残差连接
        x = x + self.dropout(y)
        # 再进行层规范化
        x = self.ln(x)

        return x
'''----------------------------------------------------------------------------------------------'''
class Self_Multi_Head_Attention(torch.nn.Module):
    # 将原本的多头注意力改成自多头注意力即可, 省略维度的变换
    def __init__(self, d, head):
        super(Self_Multi_Head_Attention, self).__init__()
        self.d = d
        self.head = head
        self.d_little = d // head
        self.w_q = torch.nn.Linear(d, d)
        self.w_k = torch.nn.Linear(d, d)
        self.w_v = torch.nn.Linear(d, d)
        self.combine = torch.nn.Linear(d, d)

    def forward(self, Q, K, V, valid_lens=None):
        if valid_lens is not None:
            valid_lens = torch.repeat_interleave(valid_lens, repeats=self.head, dim=0)
        batch = Q.shape[0]
        q = self.w_q(Q)
        k = self.w_k(K)
        v = self.w_v(V)
        q = q.view(batch, -1, self.head, self.d_little).permute(0, 2, 1, 3).reshape(batch*self.head, -1, self.d_little)
        k = k.view(batch, -1, self.head, self.d_little).permute(0, 2, 1, 3).reshape(batch*self.head, -1, self.d_little)
        v = v.view(batch, -1, self.head, self.d_little).permute(0, 2, 1, 3).reshape(batch*self.head, -1, self.d_little)
        scores = torch.matmul(q, k.transpose(-1, -2)) / math.sqrt(self.d_little)
        attention = masked_softmax(scores, valid_lens)
        output = torch.matmul(attention, v)
        output = output.reshape(batch, self.head, -1, self.d_little).permute(0, 2, 1, 3).contiguous()
        output = output.view(batch, -1, self.d)
        output = self.combine(output)
        return output
'''----------------------------------------------------------------------------------------------''' 
class Position_Coding(torch.nn.Module):
    def __init__(self, batch, n, d):
        super(Position_Coding, self).__init__()
        self.P = torch.zeros((batch, n, d))
        numerator = torch.arange(0, n, dtype=torch.float32).reshape(-1, 1)
        denominator = torch.pow(10000, torch.arange(0, d, 2, dtype=torch.float32).reshape(1, -1) / d)
        X = numerator / denominator
        self.P[:, :, 0::2] = torch.sin(X) 
        self.P[:, :, 1::2] = torch.cos(X) 

    def forward(self, X):
        X = X + self.P
        return X
'''----------------------------------------------------------------------------------------------'''   
class Encoder_Block(torch.nn.Module):
    # 输入x, 进行多头自注意力, 得到y
    # x与y, 进行res和ln, 得到z
    # z, 进行pal, 得到u
    # z与u, 进行res和ln, 结束
    def __init__(self, d, head, n, dropout, d_middle):
        super(Encoder_Block, self).__init__()
        self.attention = Self_Multi_Head_Attention(d, head)
        self.addnorm_1 = Res_and_Ln((n, d), dropout)

        self.pal = Position_and_Linear(d, d_middle, d)
        self.addnorm_2 = Res_and_Ln((n, d), dropout)
    
    def forward(self, x, valid_lens=None):
        # 在encoder中，valid_lens的作用是忽略填充词元
        y = self.attention(x, x, x, valid_lens)
        z = self.addnorm_1(x, y)
        u = self.pal(z)
        result = self.addnorm_2(z, u)

        return result
'''----------------------------------------------------------------------------------------------'''   
class Left_Block(torch.nn.Module):
    # 创建一个两层的encoder
    def __init__(self, batch, n, d, dictionary, head, left_layer, dropout, d_middle):
        super(Left_Block, self).__init__()
        # 在进行两次encoder之前, 要先对数据进行embed和position
        self.d = d
        self.embed = torch.nn.Embedding(dictionary+1, d, padding_idx=0)
        self.position = Position_Coding(batch, n, d)
        # 两次encoder
        self.blks = torch.nn.Sequential()
        for i in range(left_layer):
            self.blks.add_module("block"+str(i), Encoder_Block(d, head, n, dropout, d_middle))

    def forward(self, X, valid_lens=None):
        # 对x进行嵌入后, 缩放一下数据的大小再与位置编码相加
        # 在这里是增大数据的绝对值，因为这样可以让数据更显著
        X = self.position(self.embed(X) * math.sqrt(self.d))
        # 两次encoder
        for _, blk in enumerate(self.blks):
            X = blk(X, valid_lens)
        return X
'''----------------------------------------------------------------------------------------------'''
class Decoder_Block(torch.nn.Module):
    def __init__(self, d, head, n, dropout, d_middle, i):
        super(Decoder_Block, self).__init__()
        self.i = i

        self.attention_1 = Self_Multi_Head_Attention(d, head)
        self.addnorm_1 = Res_and_Ln((n, d), dropout)

        self.attention_2 = Self_Multi_Head_Attention(d, head)
        self.addnorm_2 = Res_and_Ln((n, d), dropout)
        
        self.pal = Position_and_Linear(d, d_middle, d)
        self.addnorm_3 = Res_and_Ln((n, d), dropout)
    
    def forward(self, x, state):
        # encoder的输出以及他的位置掩码
        encoder_output, enc_valid_lens = state[0], state[1]
        
        # 在decoder中，valid_lens的作用是让每个时间步只与当前时间步进行soft
        # 举例子：对于scores(batch,n,n), (batch,1,:)只有前1个有效, (batch,i,:)只有前i个有效
        batch, n, _ = x.shape
        # dec_lens的形状是(batch, n)
        # 每一横行的值是[1, 2, 3, ···, n]
        dec_valid_lens = torch.arange(1, n+1, device=x.device).repeat(batch, 1)
        '''-------------下面是decoder的实现-------------------''' 
        # 输入x, 进行自注意力机制得到x2
        # x与x2，进行res和ln得到y
        x2 = self.attention_1(x, x, x, dec_valid_lens)
        y = self.addnorm_1(x, x2)
        
        # y和整个encoder的输出, 进行自注意力机制得到y2
        # encoder的整个输出作为kv出现，y作为q出现
        # y与y2，进行res和ln得到z
        y2 = self.attention_2(y, encoder_output, encoder_output, enc_valid_lens)
        z = self.addnorm_2(y, y2)
        
        # z，进行pal得到z2
        # z与z2，进行res和ln，结束
        z2 = self.pal(z)
        result = self.addnorm_3(z, z2)
        
        return result, state
'''----------------------------------------------------------------------------------------------'''
class Right_Block(torch.nn.Module):
    # 创建一个2层的Decoder
    def __init__(self, batch, n, d, dictionary, head, right_layer, dropout, d_middle):
        super(Right_Block, self).__init__()
        self.d = d
        # 在进行两次decoder之前，要先对数据进行embed和position
        self.embed = torch.nn.Embedding(dictionary+1, d, padding_idx=0)
        self.position = Position_Coding(batch, n, d)
        # 两次decoder
        self.blks = torch.nn.Sequential()
        for i in range(right_layer):
            self.blks.add_module("block"+str(i), Decoder_Block(d, head, n, dropout, d_middle, i))
        # decoder结束以后要对输出进行线性变换
        self.linear  = torch.nn.Linear(d, dictionary)

        # 这是对预测阶段的特殊处理
        self.seqX = None

    def forward(self, x, state):
        if not self.training:
            # 对于训练阶段, x是(batch,n)
            # 对于预测阶段, x是(batch,1)
            self.seqX = x if self.seqX is None else torch.cat((self.seqX, x), dim=1)
            # 此时x是(batch,i)
            x = self.seqX
        
        # 对x进行嵌入和位置编码
        x = self.position(self.embed(x) * math.sqrt(self.d))
        # 两次decoder
        for _, blk in enumerate(self.blks):
            x, state = blk(x, state)
        
        if not self.training:
            # 对于训练阶段，返回(batch, n, dictionary)
            # 对于预测阶段，返回(batch, 1, dictionary)
            return self.linear(x)[:, -1:, :], state
        
        return self.linear(x), state    
'''----------------------------------------------------------------------------------------------'''
class Transformer(torch.nn.Module):
    def __init__(self, batch, n, d, dictionary, head, left_layer, right_layer, dropout, d_middle):
        super(Transformer, self).__init__()
        self.encoder = Left_Block(batch, n, d, dictionary, head, left_layer, dropout, d_middle)
        self.decoder = Right_Block(batch, n, d, dictionary, head, right_layer, dropout, d_middle)

    def forward(self, encoder_x, decoder_x, eco_valid_lens=None):
        eco_out = self.encoder(encoder_x, eco_valid_lens)
        dco_out, _ = self.decoder(decoder_x, [eco_out, eco_valid_lens])
        return dco_out
'''----------------------------------------------------------------------------------------------'''
# x表示有2个句子，每个句子有至多100个单词
# 所以每个单词的索引值至多为1-200, 0表示填充索引
# 所以x(batch=2, n=100), dictionary=100
x_encoder = (torch.rand(2, 100)*201).type(torch.long)
# 第一个句子的前56个是有效输入，第二个句子的前78个是有效输入
eco_valid_lens = torch.tensor([56, 78])

# 假设decoder_x的各项参数和encoder_x的相同
x_decoder = (torch.rand(2, 100)*201).type(torch.long)

model = Transformer(2, 100, 32, 200, 4, 3, 3, 0.1, 48)

# 最终的输出是(batch, n, dictionary)
# 整个transformer的目的是把encoder的x转换为decoder的x
# 在这里通过transformer，最终输出的是预测出的decoder的x
# 一共n个单词(包含填充)，每个单词是dictionary中的某一个
y = model(x_encoder, x_encoder, eco_valid_lens)
print(y.shape)
