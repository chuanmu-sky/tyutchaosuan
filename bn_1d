import torch

# x的形状是(3,4)
x = [[1, 2, 4, 1],
     [6, 3, 2, 4],
     [2, 4, 6, 1]]
x = torch.tensor(x, dtype=torch.float32)
# 参数是(N,L)中的L
BN_1d_tensor2d = torch.nn.BatchNorm1d(4)
x = BN_1d_tensor2d(x)
# 输出结果是对N上的数据进行了BN操作，一共有L组，也就是纵向的每一组数据都是正态分布的，一共有4组
print(x)


# x的形状是(3,4,5)
x = [[[1,2,4,1,3],
      [2,5,3,7,8],
      [4,7,2,1,0],
      [9,5,2,1,7]],
     
     [[3,6,4,0,7],
      [2,1,6,3,8],
      [9,0,3,1,5],
      [5,5,6,1,2]],
     
     [[4,2,6,9,0],
      [1,0,2,5,8],
      [3,7,2,1,9],
      [0,1,0,2,3]]]
x = torch.tensor(x, dtype=torch.float32)
# 参数是(N,C,L)中的C
BN_1d_tensor3d = torch.nn.BatchNorm1d(4)
x = BN_1d_tensor2d(x)
# 输出结果是对(N,L)上的数据进行了BN操作，也就是每个(N,L)矩阵中的元素是正态分布的，一共C组
print(x)


# 总结BN_1d可以对2d和3d数据进行正则化操作
# 对(N,L), 参数是L, 生成形状是(N,)的正态分布, 一共L个
# 对(N,C,L), 参数是C, 生成形状是(N,L)的正态分布, 一共C个
